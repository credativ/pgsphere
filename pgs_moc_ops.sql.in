-- boolean operations

CREATE FUNCTION smoc_eq (smoc, smoc)
	RETURNS boolean
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	PARALLEL SAFE
	IMMUTABLE
	STRICT;

COMMENT ON FUNCTION smoc_eq (smoc, smoc) IS 'equal';

CREATE OPERATOR = (
	LEFTARG    = smoc,
	RIGHTARG   = smoc,
	PROCEDURE  = smoc_eq,
	COMMUTATOR = '=',
	NEGATOR    = '<>',
	RESTRICT   = eqsel,
	JOIN       = eqjoinsel
);

COMMENT ON OPERATOR = (smoc, smoc) IS 'equal';

CREATE FUNCTION smoc_neq (smoc, smoc)
	RETURNS boolean
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	PARALLEL SAFE
	IMMUTABLE
	STRICT;

COMMENT ON FUNCTION smoc_neq (smoc, smoc) IS 'not equal';

CREATE OPERATOR <> (
	LEFTARG    = smoc,
	RIGHTARG   = smoc,
	PROCEDURE  = smoc_neq,
	COMMUTATOR = '<>',
	NEGATOR    = '=',
	RESTRICT   = neqsel,
	JOIN       = neqjoinsel
);

COMMENT ON OPERATOR <> (smoc, smoc) IS 'not equal';

CREATE FUNCTION smoc_overlap (smoc, smoc)
	RETURNS boolean
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	PARALLEL SAFE
	IMMUTABLE
	STRICT;

COMMENT ON FUNCTION smoc_overlap (smoc, smoc) IS 'overlaps';

CREATE OPERATOR && (
	LEFTARG    = smoc,
	RIGHTARG   = smoc,
	PROCEDURE  = smoc_overlap,
	COMMUTATOR = '&&',
	NEGATOR    = '!&&',
	RESTRICT   = contsel,
	JOIN       = contjoinsel
);

COMMENT ON OPERATOR && (smoc, smoc) IS 'overlaps';

CREATE FUNCTION smoc_overlap_neg (smoc, smoc)
	RETURNS boolean
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	PARALLEL SAFE
	IMMUTABLE
	STRICT;

COMMENT ON FUNCTION smoc_overlap_neg (smoc, smoc) IS 'overlaps not';

CREATE OPERATOR !&& (
	LEFTARG    = smoc,
	RIGHTARG   = smoc,
	PROCEDURE  = smoc_overlap_neg,
	COMMUTATOR = '!&&',
	NEGATOR    = '&&',
	RESTRICT   = contsel,
	JOIN       = contjoinsel
);

COMMENT ON OPERATOR !&& (smoc, smoc) IS 'overlaps not';

-- union and intersection

CREATE FUNCTION smoc_union (smoc, smoc)
	RETURNS smoc
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	PARALLEL SAFE
	IMMUTABLE
	STRICT;

COMMENT ON FUNCTION smoc_union (smoc, smoc) IS 'union';

CREATE OPERATOR | (
	LEFTARG   = smoc,
	RIGHTARG  = smoc,
	PROCEDURE = smoc_union
);

COMMENT ON OPERATOR | (smoc, smoc) IS 'union';

CREATE AGGREGATE sum (smoc) (
	SFUNC = smoc_union,
	STYPE = smoc
);

COMMENT ON AGGREGATE sum (smoc) IS 'smoc union aggregate';

CREATE FUNCTION smoc_intersection (smoc, smoc)
	RETURNS smoc
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	PARALLEL SAFE
	IMMUTABLE
	STRICT;

COMMENT ON FUNCTION smoc_intersection (smoc, smoc) IS 'intersection';

CREATE OPERATOR & (
	LEFTARG   = smoc,
	RIGHTARG  = smoc,
	PROCEDURE = smoc_intersection
);

COMMENT ON OPERATOR & (smoc, smoc) IS 'intersection';

CREATE AGGREGATE intersection (smoc) (
	SFUNC = smoc_intersection,
	STYPE = smoc
);

COMMENT ON AGGREGATE intersection (smoc) IS 'smoc intersection aggregate';

-- smoc constructors

CREATE FUNCTION smoc_disc ("order" int, lng double precision, lat double precision, radius double precision)
	RETURNS smoc
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	PARALLEL SAFE
	IMMUTABLE
	STRICT;

COMMENT ON FUNCTION smoc_disc ("order" int, lng double precision, lat double precision, radius double precision)
	IS 'constructs smoc of given order from circle parameters';

CREATE FUNCTION smoc ("order" int, scircle)
	RETURNS smoc
	AS 'MODULE_PATHNAME', 'smoc_scircle'
	LANGUAGE C
	PARALLEL SAFE
	IMMUTABLE
	STRICT;

COMMENT ON FUNCTION smoc ("order" int, scircle) IS 'constructs smoc of given order from scircle';

CREATE FUNCTION smoc ("order" int, spoly)
	RETURNS smoc
	AS 'MODULE_PATHNAME', 'smoc_spoly'
	LANGUAGE C
	PARALLEL SAFE
	IMMUTABLE
	STRICT;

COMMENT ON FUNCTION smoc ("order" int, spoly) IS 'constructs smoc of given order from spoly';
