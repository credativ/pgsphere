-- = and <>

CREATE FUNCTION smoc_eq (smoc, smoc)
	RETURNS boolean
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	STRICT;

CREATE OPERATOR = (
	LEFTARG    = smoc,
	RIGHTARG   = smoc,
	PROCEDURE  = smoc_eq,
	COMMUTATOR = '=',
	NEGATOR    = '<>',
	RESTRICT   = eqsel,
	JOIN       = eqjoinsel
);

CREATE FUNCTION smoc_neq (smoc, smoc)
	RETURNS boolean
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	STRICT;

CREATE OPERATOR <> (
	LEFTARG    = smoc,
	RIGHTARG   = smoc,
	PROCEDURE  = smoc_neq,
	COMMUTATOR = '<>',
	NEGATOR    = '=',
	RESTRICT   = neqsel,
	JOIN       = neqjoinsel
);

-- union and intersection

CREATE FUNCTION smoc_union (smoc, smoc)
	RETURNS smoc
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	STRICT;

CREATE OPERATOR | (
	LEFTARG   = smoc,
	RIGHTARG  = smoc,
	PROCEDURE = smoc_union
);

CREATE AGGREGATE sum (smoc) (
	SFUNC = smoc_union,
	STYPE = smoc
);

CREATE FUNCTION smoc_intersection (smoc, smoc)
	RETURNS smoc
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	STRICT;

CREATE OPERATOR & (
	LEFTARG   = smoc,
	RIGHTARG  = smoc,
	PROCEDURE = smoc_intersection
);

CREATE AGGREGATE intersection (smoc) (
	SFUNC = smoc_intersection,
	STYPE = smoc
);

-- moc constructors

CREATE FUNCTION smoc_disc ("order" int, lng double precision, lat double precision, radius double precision)
	RETURNS smoc
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	STRICT;

CREATE FUNCTION smoc ("order" int, scircle)
	RETURNS smoc
	AS 'MODULE_PATHNAME', 'smoc_scircle'
	LANGUAGE C
	STRICT;
